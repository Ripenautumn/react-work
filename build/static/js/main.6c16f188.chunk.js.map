{"version":3,"sources":["pages/Input.js","pages/List.js","pages/TodoList.js","index.js"],"names":["Input","id","ref","inp","input","value","this","props","inpValue","type","onChange","handleChange","Component","List","todos","filter","item","done","length","renderTodos","style","color","TodoList","e","setState","target","addTodo","state","title","delTodo","idx","index","toggle","newTodos","JSON","parse","stringify","map","todo","onClick","checked","dangerouslySetInnerHTML","__html","localStorage","getItem","setItem","className","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"6KAiBeA,E,uKAdF,IAAD,OAEJ,OACI,2BACIC,GAAG,MACHC,IAAK,SAAAC,GAAG,OAAE,EAAKC,MAAQD,GACvBE,MAAOC,KAAKC,MAAMC,SAClBC,KAAK,OACLC,SAAUJ,KAAKC,MAAMI,mB,GATjBC,aCiBLC,E,uKAfP,OACI,6BACI,uDAASP,KAAKC,MAAMO,MAAMC,QAAQ,SAAAC,GAAI,OAAKA,EAAKC,QAAMC,QACtD,4BACKZ,KAAKC,MAAMY,aAAY,IAE5B,wDACA,wBAAIC,MAAO,CAACC,MAAgB,UACvBf,KAAKC,MAAMY,aAAY,S,GAVzBP,aCwGJU,E,kDAnGX,aAAc,IAAD,8BACT,gBAMJX,aAAe,SAACY,GACZ,EAAKC,SAAS,CAAChB,SAASe,EAAEE,OAAOpB,SARxB,EAyBbqB,QAAU,WACkB,IAArB,EAAKC,MAAMnB,WAGd,EAAKgB,SAAS,CACVV,MAAM,CACF,CACIc,MAAO,EAAKD,MAAMnB,SAClBS,MAAM,IAHT,mBAKE,EAAKU,MAAMb,UAGtB,EAAKU,SAAS,CAAChB,SAAS,OAtCf,EAyCbqB,QAAU,SAACC,GAIP,EAAKN,SAAS,CACVV,MAAO,EAAKa,MAAMb,MAAMC,QAAO,SAACC,EAAKe,GAAN,OAAcA,GAAOD,QA9C/C,EA0DbE,OAAS,SAACD,GACN,IAAIE,EAAWC,KAAKC,MAAMD,KAAKE,UAAU,EAAKT,MAAMb,QACpDmB,EAASF,GAAOd,MAAQgB,EAASF,GAAOd,KACxC,EAAKO,SAAS,CACVV,MAAOmB,KA9DF,EAiEbd,YAAc,SAACF,GACX,OAAO,EAAKU,MAAMb,MAAMuB,KAAI,SAACC,EAAKR,GAC9B,GAAGb,GAAMqB,EAAKrB,KACV,OAAO,4BACH,2BACIsB,QAAS,kBAAI,EAAKP,OAAOF,IACzBU,QAASvB,EACTR,KAAK,aAET,0BAAMgC,wBAAyB,CAACC,OAAOJ,EAAKV,SAC5C,4BACIW,QAAS,kBAAI,EAAKV,QAAQC,KAD9B,qBAzEZ,EAAKH,MAAQ,CACTnB,SAAU,GACVM,MAAM,IAJD,E,gEAYT,IAAIA,EAAQ6B,aAAaC,QAAQ,SAC9B9B,GACCR,KAAKkB,SAAS,CACVV,MAAOoB,KAAKC,MAAMrB,O,2CAK1B6B,aAAaE,QACT,QACAX,KAAKE,UAAU9B,KAAKqB,MAAMb,U,+BA8DxB,IAAD,EAEoBR,KAAKqB,MAAvBb,EAFF,EAEEA,MAAMN,EAFR,EAEQA,SACb,OACI,yBAAKsC,UAAU,OACX,2BAAOC,QAAQ,OAAf,YACA,kBAAC,EAAD,CAAOvC,SAAYA,EAAUG,aAAcL,KAAKK,eAChD,4BAAQ4B,QAASjC,KAAKoB,SAAtB,gBACA,kBAAC,EAAD,CAAMP,YAAab,KAAKa,YAAaL,MAASA,S,GA7FvCF,aCMvBoC,IAASC,OAIP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.6c16f188.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Input extends Component{\r\n    render(){\r\n\r\n        return(\r\n            <input \r\n                id='inp'\r\n                ref={inp=>this.input = inp}\r\n                value={this.props.inpValue} \r\n                type=\"text\" \r\n                onChange={this.props.handleChange}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input;\r\n","import React, { Component } from 'react'\r\n\r\nclass List extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h2>正在进行{this.props.todos.filter( item => !item.done).length}</h2>\r\n                <ul>\r\n                    {this.props.renderTodos(false)}\r\n                </ul>\r\n                <h2>已经完成</h2>\r\n                <ul style={{color:3<2?'red':'green'}}>\r\n                    {this.props.renderTodos(true)}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react';\r\n// import './components/control.css';\r\nimport Input from './Input';\r\nimport List from './List';\r\n\r\n// 组件名首字母一定要大写\r\nclass TodoList extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inpValue: '',\r\n            todos:[]\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n    componentDidMount(){\r\n        // this.input.focus();\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos: JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }\r\n    addTodo = ()=>{\r\n        if(this.state.inpValue==''){\r\n            return;\r\n        }\r\n        this.setState({\r\n            todos: [\r\n                {\r\n                    title: this.state.inpValue,\r\n                    done: false\r\n                },\r\n                ...this.state.todos\r\n            ]\r\n        })\r\n        this.setState({inpValue:''})\r\n\r\n    }\r\n    delTodo = (idx)=>{\r\n        // let newTodos = JSON.parse(JSON.stringify(this.state.todos))\r\n        // newTodos.splice(idx,1);\r\n        // this.setState({todos:newTodos});\r\n        this.setState({\r\n            todos: this.state.todos.filter((item,index)=>index!=idx)\r\n        });\r\n        // setState 是异步执行的，注意callback的用法\r\n        // this.setState({\r\n        //     todos: this.state.todos.filter((item,index)=>index!=idx)\r\n        // },()=>{\r\n        //     localStorage.setItem(\r\n        //         'todos',\r\n        //         JSON.stringify(this.state.todos)\r\n        //     )\r\n        // });\r\n    }\r\n    toggle = (index)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos))\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos: newTodos\r\n        })\r\n    }\r\n    renderTodos = (done)=>{\r\n        return this.state.todos.map((todo,idx)=>{\r\n            if(done==todo.done){\r\n                return <li>\r\n                    <input \r\n                        onClick={()=>this.toggle(idx)}\r\n                        checked={done} \r\n                        type=\"checkbox\"\r\n                    />\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                    <button \r\n                        onClick={()=>this.delTodo(idx)}\r\n                    >\r\n                        删除\r\n                    </button>\r\n                </li>\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        \r\n        const {todos,inpValue} = this.state;\r\n        return (\r\n            <div className=\"box\">\r\n                <label htmlFor=\"inp\">todolist</label>\r\n                <Input inpValue = {inpValue} handleChange={this.handleChange}/>\r\n                <button onClick={this.addTodo}>添加</button>\r\n                <List renderTodos={this.renderTodos} todos = {todos}/>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport TodoList from './pages/TodoList';\r\n// import Home from './pages/Home';\r\n// import Control from './components/Control';\r\n// import Demo01 from './pages/Demo01';\r\n// import App from './pages/App';\r\n// import Hoc,{Detail} from './pages/Hoc';\r\n// import Hook from './pages/Hook'\r\n// import Context from './pages/context'\r\n// console.log(Context);\r\n\r\nReactDOM.render(\r\n  // <Context.Provider value='123'>\r\n  //   <Hook/>\r\n  // </Context.Provider>,\r\n  <TodoList/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n// 实现带有本地存储的todolist功能（类组件实现）：\r\n\r\n// 最外层index.js里render(<TodoList/>,xx)\r\n// TodoList组件里包含Input和List两个组件\r\n// 输入框输入时不进行本地存储（使用componentDidUpdate）\r\n\r\n// 写完进行npm run build,将打包完的静态传到github，\r\n// 设置github pages，雪梨提交网页链接和四个文件的代码\r\n\r\n\r\n\r\n\r\n\r\n// alt shift + 上下键   复制一行\r\n// alt + 上下键         移动一行\r\n// 按住alt ，鼠标点击\r\n// Ctrl + shift + 左右键，选中整个单词\r\n// ctrl+shift+L \r\n\r\n// 组件声明\r\n// 函数组件\r\n// UI（展示）组件，木偶组件\r\n// function App(props){\r\n//   const { title, id } = props;\r\n//   return <div>\r\n//     <h1>App组件内容</h1>\r\n//     <div>{title}</div>\r\n//     <div>{id}</div>\r\n//   </div>\r\n// }\r\n// // 智能组件\r\n// class Demo extends React.Component{\r\n//   constructor(){\r\n//      super();\r\n//     //  声明状态\r\n//      this.state = {\r\n//        name: new Date().toLocaleString()\r\n//      }\r\n//      setInterval(()=>{\r\n//       this.setState({name:new Date().toLocaleString()})\r\n//      },1000)\r\n//   }\r\n//   render(){\r\n//     return <div>\r\n//       <div>name:{this.state.name}</div>\r\n//       <App title={this.state.name} id='app'/>\r\n//     </div>\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n// let ele = React.createElement(\r\n//   'h1',\r\n//   {id:'title'},\r\n//   React.createElement('div',{},'hello'),\r\n//   'react'\r\n// )\r\n\r\n// 将jsx对象渲染到DOM中\r\n// let ReactDOM = {\r\n//   render(eleObj,container){\r\n//     // 解构\r\n//     const { type,props } = eleObj;\r\n//     // 创建第一层节点\r\n//     let ele = document.createElement(type);\r\n//     // 遍历属性对象，将属性添加到第一层节点对象上\r\n//     for (const prop in props) {\r\n//       console.log(prop)\r\n//       if(prop == 'children'){\r\n//         if(typeof props.children == 'string'){\r\n//             const txtNode = document.createTextNode(props.children);\r\n//             ele.appendChild(txtNode);\r\n//             break;\r\n//         }\r\n//         // 将第一层节点对象的子元素添加进去\r\n//         props.children.forEach( child => {\r\n//           if(typeof child == 'string'){\r\n//             const txtNode = document.createTextNode(child);\r\n//             ele.appendChild(txtNode);\r\n//           }else{\r\n//             ReactDOM.render(child,ele);\r\n//           }\r\n//         })\r\n//       }else{\r\n//         ele[prop] = props[prop];\r\n//       }\r\n//     }\r\n\r\n//     // 将第一层DOM节点添加到container中\r\n//     container.appendChild(ele);\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n  // 1、原生JS，DOM操作（jQ）\r\n  // 2、React：开发效率高、性能高\r\n  // 3、环境搭建、创建一个项目、运行\r\n  // 4、JSX语法\r\n\r\n  \r\n\r\n\r\n"],"sourceRoot":""}